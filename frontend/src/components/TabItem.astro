---
export interface Props {
    label: string;
    panel: string;
}

const { label, panel } = Astro.props;
---

<button 
    role="tab" 
    aria-controls={panel}
    aria-selected={false}
    class="tab-button"
>
    {label}
</button>

<style>
    .tab-button {
        padding: 0.75rem 1.5rem;
        border: none;
        background: none;
        cursor: pointer;
        font-size: 1rem;
        border-bottom: 2px solid transparent;
        margin-bottom: -2px;
        color: var(--text-primary);
    }

    .tab-button[aria-selected="true"],
    .tab-button.selected {
        border-bottom-color: var(--accent);
        color: var(--accent);
    }

    .tab-button:hover {
        color: var(--accent);
    }
</style>

<script>
    const tabList = document.querySelector('[role="tablist"]');
    const tabs = tabList.querySelectorAll('[role="tab"]');
    const panels = document.querySelectorAll('[role="tabpanel"]');

    // Hide all panels except the first one
    panels.forEach((panel, index) => {
        if (index !== 0) panel.hidden = true;
    });

    // Add click handlers to tabs
    tabs.forEach((tab) => {
        tab.addEventListener('click', (e) => {
            const target = e.target;
            const panelId = target.getAttribute('aria-controls');
            const panel = document.getElementById(panelId);

            // Hide all panels
            panels.forEach(panel => panel.hidden = true);
            
            // Show the selected panel
            panel.hidden = false;

            // Set the clicked tab as selected
            tabs.forEach(tab => {
                tab.setAttribute('aria-selected', 'false');
                tab.classList.remove('selected');
            });
            target.setAttribute('aria-selected', 'true');
            target.classList.add('selected');
        });
    });
</script> 