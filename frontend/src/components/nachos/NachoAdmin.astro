---
interface PendingReview {
    id: string;
    restaurant_name: string;
    reviewer_name: string;
    overall_rating: number;
    cheese_rating: number;
    crispiness_rating: number;
    topping_quality: number;
    price: number;
    review_text: string;
}

// Fetch pending reviews from the backend
const response = await fetch('http://localhost:8000/api/nacho-reviews/pending');
const pendingReviews: PendingReview[] = await response.json();
---

<div class="admin-panel">
    <h2>Pending Reviews</h2>
    
    {pendingReviews.length === 0 ? (
        <p class="no-reviews">No pending reviews to approve</p>
    ) : (
        <div class="reviews-grid">
            {pendingReviews.map((review) => (
                <div class="review-card" data-review-id={review.id}>
                    <div class="review-header">
                        <h3>{review.restaurant_name}</h3>
                        <span class="reviewer">by {review.reviewer_name}</span>
                    </div>
                    
                    <div class="ratings">
                        <div class="rating">
                            <span class="label">Overall:</span>
                            <span class="value">{review.overall_rating}/5</span>
                        </div>
                        <div class="rating">
                            <span class="label">Cheese:</span>
                            <span class="value">{review.cheese_rating}/5</span>
                        </div>
                        <div class="rating">
                            <span class="label">Crispiness:</span>
                            <span class="value">{review.crispiness_rating}/5</span>
                        </div>
                        <div class="rating">
                            <span class="label">Toppings:</span>
                            <span class="value">{review.topping_quality}/5</span>
                        </div>
                        <div class="rating">
                            <span class="label">Price:</span>
                            <span class="value">${review.price}</span>
                        </div>
                    </div>
                    
                    <p class="review-text">{review.review_text}</p>
                    
                    <div class="actions">
                        <button class="approve-btn" data-review-id={review.id}>
                            Approve
                        </button>
                        <button class="reject-btn" data-review-id={review.id}>
                            Reject
                        </button>
                    </div>
                </div>
            ))}
        </div>
    )}
</div>

<script>
    function setupReviewActions() {
        document.querySelectorAll<HTMLButtonElement>('.approve-btn').forEach(button => {
            button.addEventListener('click', async (e) => {
                const target = e.currentTarget as HTMLButtonElement;
                const reviewId = target.dataset.reviewId;
                if (!reviewId) return;

                try {
                    const response = await fetch(`http://localhost:8000/api/nacho-reviews/${reviewId}/approve`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    });

                    if (!response.ok) throw new Error('Failed to approve review');
                    
                    const card = document.querySelector<HTMLElement>(`[data-review-id="${reviewId}"]`);
                    if (!card) return;
                    card.remove();
                    
                    // Show empty state if no more reviews
                    const reviewCards = document.querySelectorAll('.review-card');
                    if (reviewCards.length === 0) {
                        const adminPanel = document.querySelector('.admin-panel');
                        if (adminPanel) {
                            adminPanel.innerHTML = '<h2>Pending Reviews</h2><p class="no-reviews">No pending reviews to approve</p>';
                        }
                    }
                } catch (error) {
                    console.error('Error approving review:', error);
                    alert('Failed to approve review. Please try again.');
                }
            });
        });

        document.querySelectorAll<HTMLButtonElement>('.reject-btn').forEach(button => {
            button.addEventListener('click', async (e) => {
                const target = e.currentTarget as HTMLButtonElement;
                const reviewId = target.dataset.reviewId;
                if (!reviewId) return;

                try {
                    const response = await fetch(`http://localhost:8000/api/nacho-reviews/${reviewId}`, {
                        method: 'DELETE'
                    });

                    if (!response.ok) throw new Error('Failed to reject review');
                    
                    const card = document.querySelector<HTMLElement>(`[data-review-id="${reviewId}"]`);
                    if (!card) return;
                    card.remove();
                    
                    // Show empty state if no more reviews
                    const reviewCards = document.querySelectorAll('.review-card');
                    if (reviewCards.length === 0) {
                        const adminPanel = document.querySelector('.admin-panel');
                        if (adminPanel) {
                            adminPanel.innerHTML = '<h2>Pending Reviews</h2><p class="no-reviews">No pending reviews to approve</p>';
                        }
                    }
                } catch (error) {
                    console.error('Error rejecting review:', error);
                    alert('Failed to reject review. Please try again.');
                }
            });
        });
    }

    setupReviewActions();
</script>

<style>
    .admin-panel {
        max-width: 1200px;
        margin: 0 auto;
    }

    h2 {
        margin-bottom: 2rem;
        color: var(--text-primary);
    }

    .no-reviews {
        text-align: center;
        padding: 2rem;
        background: #f8f8f8;
        border-radius: 8px;
        color: #666;
    }

    .reviews-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
    }

    .review-card {
        background: white;
        padding: 1.5rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .review-header {
        margin-bottom: 1rem;
    }

    .review-header h3 {
        margin: 0;
        color: var(--text-primary);
    }

    .reviewer {
        font-size: 0.9rem;
        color: #666;
    }

    .ratings {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

    .rating {
        display: flex;
        justify-content: space-between;
        font-size: 0.9rem;
    }

    .label {
        color: #666;
    }

    .value {
        font-weight: 500;
    }

    .review-text {
        margin: 1rem 0;
        color: #444;
    }

    .actions {
        display: flex;
        gap: 1rem;
        margin-top: 1rem;
    }

    button {
        flex: 1;
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 500;
        transition: opacity 0.2s;
    }

    button:hover {
        opacity: 0.9;
    }

    .approve-btn {
        background: var(--accent, #007bff);
        color: white;
    }

    .reject-btn {
        background: #dc3545;
        color: white;
    }
</style> 