---
import BaseLayout from '../layouts/BaseLayout.astro';
import Tabs from '../components/Tabs.astro';

const API_URL = import.meta.env.PUBLIC_API_URL;
let reviews = [];
let stats = {
    scores: {
        avg_quantity: 0,
        avg_taste: 0,
        avg_atmosphere: 0,
        avg_overall: 0
    },
    price_distribution: [],
    monthly_averages: []
};

try {
    const [reviewsResponse, statsResponse] = await Promise.all([
        fetch(`${API_URL}/api/reviews`),
        fetch(`${API_URL}/api/stats`)
    ]);

    if (reviewsResponse.ok) {
        reviews = await reviewsResponse.json();
        console.log('Fetched reviews:', reviews);
    } else {
        console.error('Failed to fetch reviews:', await reviewsResponse.text());
    }

    if (statsResponse.ok) {
        stats = await statsResponse.json();
        console.log('Fetched stats:', stats);
    } else {
        console.error('Failed to fetch stats:', await statsResponse.text());
    }
} catch (error) {
    console.error('Error fetching data:', error);
}
---

<BaseLayout>
    <div class="container">
        <h1>Nacho Reviews</h1>
        
        <Tabs>
            <div role="tab" slot="tab" aria-selected="true" aria-controls="dashboard-panel">Dashboard</div>
            <div role="tab" slot="tab" aria-controls="submit-panel">Submit Review</div>
            <div role="tab" slot="tab" aria-controls="admin-panel">Admin</div>
            <div role="tab" slot="tab" aria-controls="rubric-panel">Grading Rubric</div>

            <div role="tabpanel" slot="panel" id="dashboard-panel">
                <div class="dashboard-grid">
                    <div class="chart-container">
                        <h3>Average Scores by Category</h3>
                        <canvas id="scoresChart"></canvas>
                    </div>
                    <div class="chart-container">
                        <h3>Price Distribution</h3>
                        <canvas id="priceChart"></canvas>
                    </div>
                    <div class="chart-container">
                        <h3>Overall Score Timeline</h3>
                        <canvas id="timelineChart"></canvas>
                    </div>
                </div>
                
                <div class="reviews-list">
                    <h3>Recent Reviews</h3>
                    {reviews.map((review) => (
                        <div class="review-card">
                            <div class="review-header">
                                <h4>{review.name}</h4>
                                <span class="date">{new Date(review.date).toLocaleDateString()}</span>
                            </div>
                            <div class="scores">
                                <span>Quantity: {review.quantity_score}/10</span>
                                <span>Taste: {review.taste_score}/10</span>
                                <span>Atmosphere: {review.atmosphere_score}/10</span>
                                <span>Overall: {review.overall_score}/10</span>
                            </div>
                            <p class="meal">{review.meal}</p>
                            {review.meal_description && <p class="description">{review.meal_description}</p>}
                            {review.comments && <p class="comments">{review.comments}</p>}
                            <div class="meta">
                                <span class="price">${review.price}</span>
                                <span class="reviewer">Reviewed by {review.reviewer}</span>
                            </div>
                        </div>
                    ))}
                </div>
            </div>

            <div role="tabpanel" slot="panel" id="submit-panel" hidden>
                <form id="review-form" class="review-form">
                    <div class="form-group">
                        <label for="name">Restaurant Name*</label>
                        <input type="text" id="name" name="name" required placeholder="Enter restaurant name">
                    </div>
                    <div class="form-group">
                        <label for="meal">Meal Name*</label>
                        <input type="text" id="meal" name="meal" required placeholder="What nacho dish did you have?">
                    </div>
                    <div class="form-group">
                        <label for="meal_description">Meal Description</label>
                        <textarea id="meal_description" name="meal_description" 
                            placeholder="Describe the nachos (toppings, presentation, etc.)"></textarea>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="price">Price*</label>
                            <input type="number" id="price" name="price" step="0.01" required 
                                placeholder="0.00" min="0">
                            <span class="helper-text">Enter the price in dollars</span>
                        </div>
                        <div class="form-group">
                            <label for="reviewer">Your Name*</label>
                            <input type="text" id="reviewer" name="reviewer" required 
                                placeholder="Enter your name">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <div class="score-label">
                                <label for="quantity_score">Quantity Score*</label>
                                <span class="score-range">(1-10)</span>
                            </div>
                            <input type="number" id="quantity_score" name="quantity_score" 
                                min="1" max="10" required placeholder="1-10">
                        </div>
                        <div class="form-group">
                            <div class="score-label">
                                <label for="taste_score">Taste Score*</label>
                                <span class="score-range">(1-10)</span>
                            </div>
                            <input type="number" id="taste_score" name="taste_score" 
                                min="1" max="10" required placeholder="1-10">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <div class="score-label">
                                <label for="atmosphere_score">Atmosphere Score*</label>
                                <span class="score-range">(1-10)</span>
                            </div>
                            <input type="number" id="atmosphere_score" name="atmosphere_score" 
                                min="1" max="10" required placeholder="1-10">
                        </div>
                        <div class="form-group">
                            <div class="score-label">
                                <label for="overall_score">Overall Score*</label>
                                <span class="score-range">(1-10)</span>
                            </div>
                            <input type="number" id="overall_score" name="overall_score" 
                                min="1" max="10" required placeholder="1-10">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="comments">Additional Comments</label>
                        <textarea id="comments" name="comments" 
                            placeholder="Any additional thoughts about your nacho experience?"></textarea>
                    </div>
                    <button type="submit">Submit Review</button>
                </form>
            </div>

            <div role="tabpanel" slot="panel" id="admin-panel" hidden>
                <div class="admin-login" id="admin-login">
                    <h3>Admin Login</h3>
                    <form id="login-form" class="login-form">
                        <div class="form-group">
                            <label for="username">Username</label>
                            <input type="text" id="username" name="username" required>
                        </div>
                        <div class="form-group">
                            <label for="password">Password</label>
                            <input type="password" id="password" name="password" required>
                        </div>
                        <button type="submit">Login</button>
                    </form>
                </div>
                
                <div class="pending-reviews hidden" id="pending-reviews">
                    <h3>Pending Reviews</h3>
                    <div id="pending-reviews-list">
                        <!-- Populated by JavaScript -->
                    </div>
                </div>
            </div>

            <div role="tabpanel" slot="panel" id="rubric-panel" hidden>
                <div class="rubric">
                    <h3>Nacho Review Rubric</h3>
                    <div class="rubric-grid">
                        <div class="category">
                            <h4>Quantity (1-10)</h4>
                            <p>Evaluates portion size, value for money, and consistency of toppings distribution.</p>
                            <ul>
                                <li>9-10: Generous portion, excellent value</li>
                                <li>7-8: Good portion size</li>
                                <li>5-6: Average portion</li>
                                <li>3-4: Small portion</li>
                                <li>1-2: Inadequate portion</li>
                            </ul>
                        </div>
                        <div class="category">
                            <h4>Taste (1-10)</h4>
                            <p>Assesses flavor balance, quality of ingredients, and overall taste experience.</p>
                            <ul>
                                <li>9-10: Exceptional flavor combination</li>
                                <li>7-8: Very tasty</li>
                                <li>5-6: Decent taste</li>
                                <li>3-4: Below average taste</li>
                                <li>1-2: Poor taste</li>
                            </ul>
                        </div>
                        <div class="category">
                            <h4>Atmosphere (1-10)</h4>
                            <p>Evaluates the dining environment and service quality.</p>
                            <ul>
                                <li>9-10: Outstanding atmosphere and service</li>
                                <li>7-8: Pleasant environment</li>
                                <li>5-6: Average atmosphere</li>
                                <li>3-4: Below average atmosphere</li>
                                <li>1-2: Poor atmosphere</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </Tabs>
    </div>
</BaseLayout>

<style>
    .container {
        margin: 0 auto;
        padding: 1rem;
        max-width: 1400px;
        width: 95%;
    }

    h1 {
        text-align: center;
        margin-bottom: 2rem;
    }

    .dashboard-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 2rem;
        margin: 2rem 0;
    }

    .chart-container {
        background: var(--card-bg, #ffffff);
        padding: 1.5rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        height: 500px;
        position: relative;
        margin-bottom: 1rem;
        border: 1px solid var(--border-color, #eaeaea);
    }

    .chart-container h3 {
        margin-bottom: 1rem;
        text-align: center;
        font-size: 1.2rem;
    }

    .chart-container canvas {
        width: 100% !important;
        height: calc(100% - 3rem) !important;
    }

    .review-form {
        max-width: 800px;
        margin: 2rem auto;
        padding: 2rem;
        background: var(--bg-color, #ffffff);
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        border: 1px solid var(--border-color, #eaeaea);
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1.5rem;
        margin-bottom: 1.5rem;
    }

    label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: var(--text-color);
    }

    input, select, textarea {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 2px solid var(--border-color);
        border-radius: 6px;
        background: var(--card-bg, #f5f5f5);
        color: rgba(0, 0, 0, 0.9);
        font-size: 1rem;
        transition: border-color 0.2s, box-shadow 0.2s, background-color 0.2s;
        box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.05);
    }

    input:focus, select:focus, textarea:focus {
        outline: none;
        border-color: var(--accent-color);
        box-shadow: 0 0 0 3px rgba(var(--accent-color-rgb), 0.1);
        background: var(--bg-color, #ffffff);
    }

    input:hover, select:hover, textarea:hover {
        border-color: var(--accent-color);
        background: var(--bg-color, #ffffff);
    }

    textarea {
        height: 120px;
        resize: vertical;
        min-height: 80px;
        max-height: 300px;
    }

    button[type="submit"] {
        background: var(--accent-color, #4CAF50);
        color: white;
        padding: 0.75rem 2rem;
        border: none;
        border-radius: 6px;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: transform 0.2s, box-shadow 0.2s;
        display: block;
        margin: 2rem auto 0;
        min-width: 200px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    button[type="submit"]:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        background: var(--accent-dark, #388E3C);
    }

    button[type="submit"]:active {
        transform: translateY(0);
        background: var(--accent-color, #4CAF50);
    }

    .rubric-grid {
        display: grid;
        gap: 1.5rem;
        margin-top: 1rem;
    }

    .rubric-item {
        background: var(--card-bg);
        padding: 1rem;
        border-radius: 8px;
    }

    .pending-review-card {
        background: var(--card-bg);
        padding: 1.5rem;
        border-radius: 8px;
        margin-bottom: 1rem;
    }

    .admin-actions {
        display: flex;
        gap: 1rem;
        margin-top: 1rem;
    }

    .approve-btn {
        background: var(--success-color, #4CAF50);
    }

    .reject-btn {
        background: var(--danger-color, #f44336);
    }

    .reviews-list {
        margin-top: 2rem;
    }

    .review-card {
        background: var(--card-bg);
        padding: 1.5rem;
        border-radius: 8px;
        margin-bottom: 1rem;
    }

    .review-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .scores {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
        margin-bottom: 1rem;
    }

    .meta {
        display: flex;
        justify-content: space-between;
        margin-top: 1rem;
        font-size: 0.9rem;
        color: var(--text-muted);
    }

    .hidden {
        display: none;
    }

    .login-form {
        max-width: 400px;
        margin: 0 auto;
    }

    /* Add required field indicator */
    label[for*="required"]::after,
    input[required] + label::after {
        content: " *";
        color: var(--accent-color);
    }

    /* Add some helper text styling */
    .helper-text {
        font-size: 0.875rem;
        color: var(--text-muted);
        margin-top: 0.25rem;
    }

    /* Score input specific styling */
    input[type="number"] {
        text-align: center;
        background: var(--card-bg, #f5f5f5);
    }

    .score-label {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .score-range {
        font-size: 0.875rem;
        color: var(--text-muted);
    }

    /* Add specific styling for placeholder text */
    input::placeholder, textarea::placeholder {
        color: rgba(0, 0, 0, 0.4);
    }

    /* Make the timeline chart span full width */
    .chart-container:last-child {
        grid-column: 1 / -1;
    }

    /* Add specific styling for form buttons */
    .review-form button[type="submit"] {
        background: #4CAF50;
        margin-top: 2rem;
        width: auto;
        min-width: 200px;
        padding: 1rem 2rem;
    }
</style>

<script is:inline src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script define:vars={{ stats, API_URL }}>
    document.addEventListener('DOMContentLoaded', () => {
        try {
            console.log("Starting chart initialization with stats:", stats);
            
            // Get canvas elements
            const scoresCanvas = document.getElementById('scoresChart');
            const priceCanvas = document.getElementById('priceChart');
            const timelineCanvas = document.getElementById('timelineChart');

            if (!scoresCanvas || !priceCanvas || !timelineCanvas) {
                console.error("Could not find canvas elements");
                return;
            }

            // Get contexts
            const scoresCtx = scoresCanvas.getContext('2d');
            const priceCtx = priceCanvas.getContext('2d');
            const timelineCtx = timelineCanvas.getContext('2d');

            if (!scoresCtx || !priceCtx || !timelineCtx) {
                console.error("Could not get canvas contexts");
                return;
            }

            console.log("Creating radar chart with data:", [
                stats.scores.avg_quantity,
                stats.scores.avg_taste,
                stats.scores.avg_atmosphere,
                stats.scores.avg_overall
            ]);

            // Radar Chart (Scores)
            const scoresChart = new Chart(scoresCtx, {
                type: 'radar',
                data: {
                    labels: ['Quantity', 'Taste', 'Atmosphere', 'Overall'],
                    datasets: [{
                        label: 'Average Scores',
                        data: [
                            stats.scores.avg_quantity,
                            stats.scores.avg_taste,
                            stats.scores.avg_atmosphere,
                            stats.scores.avg_overall
                        ],
                        fill: true,
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        borderColor: 'rgb(255, 99, 132)',
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        r: {
                            beginAtZero: true,
                            max: 10,
                            min: 0,
                            ticks: {
                                stepSize: 2
                            }
                        }
                    }
                }
            });

            console.log("Creating pie chart with data:", stats.price_distribution);

            // Pie Chart (Price Distribution)
            const priceChart = new Chart(priceCtx, {
                type: 'pie',
                data: {
                    labels: stats.price_distribution.map(d => d.price_range),
                    datasets: [{
                        data: stats.price_distribution.map(d => d.count),
                        backgroundColor: [
                            'rgba(75, 192, 192, 0.8)',
                            'rgba(54, 162, 235, 0.8)',
                            'rgba(153, 102, 255, 0.8)',
                            'rgba(255, 159, 64, 0.8)'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });

            console.log("Creating timeline chart with data:", stats.monthly_averages);

            // Line Chart (Timeline)
            const timelineChart = new Chart(timelineCtx, {
                type: 'line',
                data: {
                    labels: stats.monthly_averages.map(d => d.month),
                    datasets: [{
                        label: 'Average Overall Score',
                        data: stats.monthly_averages.map(d => d.avg_score),
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1,
                        fill: false
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 10,
                            min: 0,
                            ticks: {
                                stepSize: 1
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });

            console.log("Charts initialized successfully!");
        } catch (error) {
            console.error("Error initializing charts:", error);
        }
    });

    // Update the review form submission
    const reviewForm = document.getElementById('review-form');
    reviewForm?.addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(reviewForm);
        const reviewData = Object.fromEntries(formData);
        
        // Convert numeric fields from string to number
        reviewData.price = parseFloat(reviewData.price);
        reviewData.quantity_score = parseInt(reviewData.quantity_score);
        reviewData.taste_score = parseInt(reviewData.taste_score);
        reviewData.atmosphere_score = parseInt(reviewData.atmosphere_score);
        reviewData.overall_score = parseInt(reviewData.overall_score);
        
        try {
            const response = await fetch(`${API_URL}/api/reviews`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(reviewData)
            });
            
            if (response.ok) {
                alert('Review submitted successfully! It will be visible after approval.');
                reviewForm.reset();
                // Refresh the page to update the stats
                window.location.reload();
            } else {
                const error = await response.text();
                throw new Error(error);
            }
        } catch (error) {
            alert('Error submitting review: ' + error.message);
        }
    });

    // Update the admin login
    let authToken = '';
    
    const loginForm = document.getElementById('login-form');
    const adminLogin = document.getElementById('admin-login');
    const pendingReviews = document.getElementById('pending-reviews');
    
    loginForm?.addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(loginForm);
        
        try {
            const response = await fetch(`${API_URL}/token`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams({
                    username: formData.get('username'),
                    password: formData.get('password'),
                    grant_type: 'password'
                }),
            });
            
            if (response.ok) {
                const data = await response.json();
                authToken = data.access_token;
                adminLogin.classList.add('hidden');
                pendingReviews.classList.remove('hidden');
                await loadPendingReviews();
            } else {
                const error = await response.text();
                throw new Error(error);
            }
        } catch (error) {
            alert('Login failed: ' + error.message);
        }
    });

    async function loadPendingReviews() {
        try {
            const response = await fetch(`${API_URL}/api/pending-reviews`, {
                headers: {
                    'Authorization': `Bearer ${authToken}`,
                },
            });
            
            if (response.ok) {
                const reviews = await response.json();
                const container = document.getElementById('pending-reviews-list');
                
                if (!reviews || reviews.length === 0) {
                    container.innerHTML = '<p>No pending reviews</p>';
                    return;
                }
                
                container.innerHTML = reviews.map(review => `
                    <div class="pending-review-card">
                        <h4>${review.name}</h4>
                        <p>${review.meal}</p>
                        <div class="scores">
                            <span>Quantity: ${review.quantity_score}/10</span>
                            <span>Taste: ${review.taste_score}/10</span>
                            <span>Atmosphere: ${review.atmosphere_score}/10</span>
                            <span>Overall: ${review.overall_score}/10</span>
                        </div>
                        <p>${review.comments || ''}</p>
                        <div class="admin-actions">
                            <button onclick="approveReview(${review.review_id})" class="approve-btn">Approve</button>
                            <button onclick="rejectReview(${review.review_id})" class="reject-btn">Reject</button>
                        </div>
                    </div>
                `).join('');
            } else {
                throw new Error('Failed to load pending reviews');
            }
        } catch (error) {
            console.error('Error loading pending reviews:', error);
            alert('Error loading pending reviews');
        }
    }

    window.approveReview = async (reviewId) => {
        try {
            const response = await fetch(`${API_URL}/api/reviews/${reviewId}/approve`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${authToken}`,
                },
            });
            
            if (response.ok) {
                await loadPendingReviews();
                // Refresh the page to update the stats
                window.location.reload();
            } else {
                throw new Error('Failed to approve review');
            }
        } catch (error) {
            alert('Error approving review: ' + error.message);
        }
    };
</script>

<script define:vars={{ API_URL }}>
    // Form submission and admin functionality
    const reviewForm = document.getElementById('review-form');
    // Rest of your form and admin code...
</script> 